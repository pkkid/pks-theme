package com.tuenti.services.argentina.business.companymanagement.companypermissions;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;

import com.tuenti.services.argentina.business.companymanagement.companypermissions.repository.CompanyPermission;
import com.tuenti.services.argentina.business.companymanagement.config.CompanyManagementConfig;
import com.tuenti.services.argentina.business.companymanagement.companylogin.CompanyLoginManager;
import com.tuenti.services.argentina.business.companymanagement.companypermissions.repository
		.CompanyPermissionsRepository;
import com.tuenti.services.argentina.business.useraccount.common.apiinteractor.UserInfoApiInteractor;
import com.tuenti.services.argentina.integration.autogenerated.v1.constants.IsPermissionGrantedErrorCodes;
import com.tuenti.services.argentina.integration.autogenerated.v1.constants.LoginResponseErrorCodes;
import com.tuenti.services.argentina.integration.autogenerated.v1.dto.IsPermissionGrantedResponse;
import com.tuenti.services.argentina.integration.autogenerated.v1.dto.Permission;
import com.tuenti.services.argentina.integration.autogenerated.v1.dto.PermissionsResponse;
import com.tuenti.services.argentina.common.config.EnvironmentConfig;
import com.tuenti.services.argentina.business.useraccount.common.model.UserInfo;

public class CompanyPermissionsManager {
	private final UserInfoApiInteractor userInfoApiInteractor;
	private final CompanyLoginManager companyLoginManager;
	private final CompanyPermissionsRepository repository;
	private final EnvironmentConfig envConfig;
	private final CompanyManagementConfig config;

	@Inject
	public CompanyPermissionsManager(UserInfoApiInteractor userInfoApiInteractor,
			CompanyLoginManager companyLoginManager, CompanyPermissionsRepository repository,
			EnvironmentConfig envConfig, CompanyManagementConfig config) {
		this.userInfoApiInteractor = userInfoApiInteractor;
		this.companyLoginManager = companyLoginManager;
		this.repository = repository;
		this.envConfig = envConfig;
		this.config = config;
	}

	public IsPermissionGrantedResponse isCompanyPermissionGranted(String auth, String msisdn,
			String permissionKey) {
		if (envConfig.getSegment() != EnvironmentConfig.Segment.B2B) {
			return IsPermissionGrantedResponseFactory.unauthorized();
		}
		UserInfo userInfo = userInfoApiInteractor.getUserInfo(auth, msisdn);
		PermissionsResponse permissionsResponse =
				listCompanyPermissions(userInfo, ListPermissionsParameters.userPermissions());
		boolean granted =
				Stream.of(permissionsResponse.permissions).filter(permission -> permission.granted)
						.map(permission -> permission.permissionKey).collect(Collectors.toList())
						.contains(permissionKey);
		return IsPermissionGrantedResponseFactory.success(granted);
	}

	public PermissionsResponse listModifiableCompanyPermissions(String auth, String msisdn) {
		if (envConfig.getSegment() != EnvironmentConfig.Segment.B2B) {
			return PermissionsResponseFactory.b2cUserIsUnauthorized();
		}
		if (!companyLoginManager.isCompanyManager(msisdn)) {
			return PermissionsResponseFactory.emptyList();
		}
		UserInfo userInfo = userInfoApiInteractor.getUserInfo(auth, msisdn);
		return listCompanyPermissions(userInfo,
				ListPermissionsParameters.modifiableCompanyPermissions());
	}

	public PermissionsResponse modifyCompanyPermissions(String auth, String msisdn,
			Permission[] permissions) {
		if (envConfig.getSegment() != EnvironmentConfig.Segment.B2B) {
			return PermissionsResponseFactory.b2cUserIsUnauthorized();
		}

		if (!companyLoginManager.isCompanyManager(msisdn)) {
			return PermissionsResponseFactory.notCompanyManagerIsUnauthorized();
		}

		UserInfo userInfo = userInfoApiInteractor.getUserInfo(auth, msisdn);
		String cuit = userInfo.getCuit();
		modifyCompanyPermission(cuit, permissions);

		ListPermissionsParameters params = ListPermissionsParameters.companyPermissions();
		params.cuit = cuit;
		params.companyType = userInfo.getCompanyType();
		params.isCompanyManager = true;
		return PermissionsResponseFactory.fromPermissions(matchWithPermissionsInConfig(params));
	}

	/**
	 * TODO MOVAR-671: remove deprecated company permission methods at UnicaArgentina
	 *
	 * @deprecated use {@link #isCompanyPermissionGranted(String, String, String)} instead
	 */
	public PermissionsResponse listCompanyPermissions(String auth, String msisdn) {
		if (envConfig.getSegment() != EnvironmentConfig.Segment.B2B) {
			return PermissionsResponseFactory.b2cUserIsUnauthorized();
		}
		UserInfo userInfo = userInfoApiInteractor.getUserInfo(auth, msisdn);
		return listCompanyPermissions(userInfo, ListPermissionsParameters.userPermissions());
	}

	private PermissionsResponse listCompanyPermissions(UserInfo userInfo,
			ListPermissionsParameters params) {
		params.cuit = userInfo.getCuit();
		params.companyType = userInfo.getCompanyType();
		params.isCompanyManager = companyLoginManager.isCompanyManager(userInfo.getMsisdn());
		return PermissionsResponseFactory.fromPermissions(matchWithPermissionsInConfig(params));
	}

	/**
	 * Returns a list of CompanyPermissions with the following considerations:
	 * <ol>
	 * <li>filter those stored permissions at db that are not defined in config (white list)</li>
	 * <li>apply the given {@link ListPermissionsParameters.FilterByCompanyType} filter</li>
	 * <li>grant (overriding the value at db) every permission that must be granted by company type
	 * or due to manager's benefits</li>
	 * <li>append any missing permission defined in config but not in db, applying their default
	 * granted value</li>
	 * </ol>
	 * Examples:
	 * <p>
	 * <pre>
	 *     stored: [A: vStored] [Unknown: vStored]
	 *     config: [A: vConfig] [B: vConfig]
	 *     =>
	 *     [A: vStored] [B: vConfig]
	 * </pre>
	 * <p>
	 * users of special company type:
	 * <p>
	 * <pre>
	 *     stored: [A: vStored]
	 *     config: [A: shouldBeGrantedForCompanyType]
	 *     =>
	 *     [A: true]
	 * </pre>
	 */
	private List<CompanyPermission> matchWithPermissionsInConfig(ListPermissionsParameters params) {
		Map<String, CompanyPermission> persisted =
				repository.listCompanyPermissions(params.cuit).stream().collect(
						Collectors.toMap(CompanyPermission::getPermissionKey, Function.identity()));

		return config.listCompanyPermissions().stream()
				.filter(params.filterByCompanyType.applyingFunction.apply(params.companyType))
				.map(permissionConfig -> {
					CompanyPermission storedPermission =
							persisted.get(permissionConfig.getPermissionKey());
					return getEffectivePermission(permissionConfig, storedPermission, params);
				}).collect(Collectors.toList());
	}

	private CompanyPermission getEffectivePermission(CompanyPermission permissionFromConfig,
			CompanyPermission permissionFromStorage, ListPermissionsParameters params) {

		if (permissionFromConfig.isGrantedByCompanyType(params.companyType)
				|| isManagerAndIsGrantedToManagers(permissionFromConfig, params)) {
			return permissionFromConfig.setGranted(true);
		}

		return permissionFromStorage == null ? permissionFromConfig
				: permissionFromStorage
				.setConfirmationRequired(permissionFromConfig.isConfirmationRequired());
	}

	private boolean isManagerAndIsGrantedToManagers(CompanyPermission permission,
			ListPermissionsParameters params) {
		return params.isCompanyManager
				&& params.target == ListPermissionsParameters.Target.USER_PERMISSIONS
				&& permission.isGrantedToCompanyManager();
	}

	private void modifyCompanyPermission(String cuit, Permission[] permissions) {
		List<String> possiblePermissionKeys = config.listCompanyPermissionKeys();
		Arrays.stream(permissions).filter((p) -> possiblePermissionKeys.contains(p.permissionKey))
				.forEach((p) -> modifyCompanyPermission(cuit, p));
	}

	private boolean modifyCompanyPermission(String cuit, Permission p) {
		return p.granted ? repository.enableCompanyPermission(cuit, p.permissionKey)
				: repository.disableCompanyPermission(cuit, p.permissionKey);
	}


	private static final class ListPermissionsParameters {
		enum FilterByCompanyType {
			MODIFIABLE_PERMISSIONS((String companyType) -> permission ->
					permission.isModifiable() && !permission.isGrantedByCompanyType(companyType)),

			NO_FILTER((String companyType) -> permission -> true);

			private final Function<String, Predicate<CompanyPermission>> applyingFunction;

			FilterByCompanyType(Function<String, Predicate<CompanyPermission>> applyingFunction) {
				this.applyingFunction = applyingFunction;
			}
		}

		enum Target {
			USER_PERMISSIONS
		}

		String companyType;
		String cuit;
		boolean isCompanyManager;

		final FilterByCompanyType filterByCompanyType;
		final Target target;

		ListPermissionsParameters(FilterByCompanyType filterByCompanyType) {
			this.filterByCompanyType = filterByCompanyType;
			target = null;
		}

		ListPermissionsParameters(FilterByCompanyType filterByCompanyType, Target target) {
			this.filterByCompanyType = filterByCompanyType;
			this.target = target;
		}

		static ListPermissionsParameters userPermissions() {
			return new ListPermissionsParameters(FilterByCompanyType.NO_FILTER,
					Target.USER_PERMISSIONS);
		}

		static ListPermissionsParameters companyPermissions() {
			return new ListPermissionsParameters(FilterByCompanyType.NO_FILTER);
		}

		static ListPermissionsParameters modifiableCompanyPermissions() {
			return new ListPermissionsParameters(FilterByCompanyType.MODIFIABLE_PERMISSIONS);
		}
	}

	private static class PermissionsResponseFactory {
		static PermissionsResponse fromPermissions(List<CompanyPermission> permissions) {
			PermissionsResponse response = new PermissionsResponse();
			response.success = true;
			response.permissions = permissions.stream().map(CompanyPermission::convertToServiceDto)
					.toArray(Permission[]::new);
			return response;
		}

		static PermissionsResponse b2cUserIsUnauthorized() {
			return unauthorized("user is not b2b (no cuit found); unauthorized");
		}

		static PermissionsResponse notCompanyManagerIsUnauthorized() {
			return unauthorized("user is not logged in company manager; unauthorized");
		}

		static PermissionsResponse emptyList() {
			PermissionsResponse response = new PermissionsResponse();
			response.success = true;
			response.permissions = new Permission[0];
			return response;
		}

		private static PermissionsResponse unauthorized(String errorMsg) {
			PermissionsResponse response = new PermissionsResponse();
			response.success = false;
			response.errorCode = LoginResponseErrorCodes.UNAUTHORIZED_USER;
			response.errorMsg = errorMsg;
			response.permissions = new Permission[0];
			return response;
		}
	}

	private static class IsPermissionGrantedResponseFactory {
		static IsPermissionGrantedResponse success(boolean granted) {
			IsPermissionGrantedResponse response = new IsPermissionGrantedResponse();
			response.success = true;
			response.granted = granted;
			return response;
		}

		static IsPermissionGrantedResponse unauthorized() {
			IsPermissionGrantedResponse response = new IsPermissionGrantedResponse();
			response.success = false;
			response.errorCode = IsPermissionGrantedErrorCodes.UNAUTHORIZED_USER;
			response.errorMsg = "user is not b2b; unauthorized";
			response.granted = false;
			return response;
		}
	}
}
